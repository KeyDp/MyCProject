#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

// 算数操作符: + - * / %

// %的操作数必须是整数
// 整数/整数得整数，只要有一边是浮点数的情况下，就得浮点数

// 移位操作符: << >>

//移位操作符不可移动负数位，这个标准是未定义的
// 二进制：0-1 八进制：0-7 十进制：0-9 十六进制：0-9 a-f
// 整数的二进制表示有三种：原码、反码、补码
// 正的整数的原码、反码、补码相同
// 负的整数的原码、反码、补码是需要计算的
// eg: 7的原码为000000000111 7=1*2^0+1*2^1+1*2^2 最高位为0表示正数
// eg:-7的原码为10000000111 最高位为1表示负数
//   -7的反码为11111111000 符号位不变，其他位按位取反
//   -7的补码为11111111001 反码+1
// 整数在内存中存储的是补码
// 左移操作符: //--移动的是二进制位 规律：左边丢弃，右边补0
// 左移操作符的操作数只能是整数，不能是浮点数

//int main()
//{
//	//int a = 7;  //0000111
//	//int b = a << 1;  //0001110 14
//	//int a = -7;  //1000111 1111000 1111001
//	//int b = a << 1;  //1110010 1110001 1001110 -14
//	printf("%d", b);
//	return 0;
//}

// 右移操作符：分为算术移位和逻辑移位
// 算数移位：右边丢弃，左边补原符号位
// 逻辑移位：右边丢弃，左边补0
// VS编译器采用的是算数右移

//int main()
//{
//	//int a = 7;  //0000111
//	//int b = a >> 1;  //0000011 3
//	int a = -7;  //1000111 1111000 1111001
//	int b = a >> 1;  //1111100 1111011 1000100 -4 
//	printf("%d", b);
//	return 0;
//}

// 位操作符: & | ^

//&--按（二进制）位与:有0为0，无0为1
//|--按（二进制）位或:有1为1，无1为0
//^--按（二进制）位异或:相同为0，相异为1
//异或:两个相同的数异或为0,0异或一个数得这个数，异或支持交换律
//

//int main()
//{
//	int a = 3;  //00000...11(4字节32bit)
//	int b = -5;  //1000...101 1111...010 1111...011
//	//int c = a & b;
//	//int c = a | b;
//	int c = a ^ b;
//	printf("%d\n", c);  //0000...011
//	return 0;
//}

// 不能创建第三个临时变量，实现两个数的交换

//这种方法会有溢出的问题
//int main()
//{
//	int a = 1;
//	int b = 2;
//	a = a + b;
//	b = a - b;
//	a = a - b;
//	return 0;
//}

//int main()
//{
//	int a = 3;
//	int b = 5;
//	a = a ^ b;  //a = 3 ^ 5
//	b = a ^ b;  //b = 3 ^ 5 ^ 5 = 3
//	a = a ^ b;  //a = 3 ^ 5 ^ 3 = 5
//	return 0;
//}

// 求一个整数存储在内存中的二进制中1的个数

//int main()
//{                //   1 00000000000000000000000000000001
//	int a = 0;  //eg：5 00000000000000000000000000000101
//	scanf("%d", &a);
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (a & 1 == 1)
//		{
//			count++;
//		}
//		a = a >> 1;
//	}
//	printf("%d", count);
//}

// 赋值操作符: = 
// 复合赋值操作符: += -= *= /= %= <<= >>= ^= &= |=

//int main()
//{
//	//int a = 0;  //初始化
//	//a = 20;  //赋值
//	int x = 0;
//	int y = 20;
//	int a = 10;
//	a = x = y + 10;  //连续赋值不建议,分着写,可读性差
//	return 0;
//}

// 单目操作符(只有一个操作数): ! 
// 逻辑反操作:！ 负值:- 正值:+ 取地址:&
// int main()
// {
//		int a = 0;
//		int* p = &a;  //p就是指针变量
//		printf("%p\n", &a);  //用%p打印
//		return 0;
//  }
// sizeof--计算操作数所占内存大小，单位是字节
// sizeof(a)可以 sizeof a也可以 sizeof(int)可以 sizeof int不行
// ~--对一个数的二进制(补码)按位取反
// int main()
// {
//	 int a = 13;     //00000000000000000000000000001101补码
//	 a |= (1 << 1);  //00000000000000000000000000000010 (1 << 1)
//	 printf("%d\n", a);//00000000000000000000000000001111
//	 return 0;
// }
// 前置++:先++后使用
// 后置++:先使用后++
// 前置--:先--后使用
// 后置--:先使用后--
// 间接访问操作符(解引用操作符)*
// int main()
// {
//		int a = 10;
//		int* p = &a;
//      *p = 20;
//		printf("%d", a);
//		return 0;
// }
// 强制类型转换(类型)

//关系操作符: > < >= <= == !=
//字符串不能if("abc" == "abcdef") 应该用strcmp来比较

// 逻辑操作符: && ||
// 只关注真假
// &&--必须两个都为真  左边为假右边就不计算了
// ||--有一个为真就行  左边为真右边就不计算了
// 

//int main()
//{
//	int a = 1;
//	int b = 2;
//	int c = 0;
//	int d = a && b;
//	int e = a || c;
//	printf("%d%d", d, e);
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	int b = 2;
//	int c = 3;
//	int d = 4;
//	int i = a++ && ++b && d++;  //&&符号左边为假右边就不计算了
//	printf("%d %d %d %d", a, b, c, d);
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	int b = 2;
//	int c = 3;
//	int d = 4;
//	int i = a++ || ++b || d++;  //||符号左边为真右边就不计算了
//	printf("%d %d %d %d", a, b, c, d);
//	return 0;
//}

//条件操作符（三目操作符）：exp1 ? exp2 : exp3

//求出a,b的最大值

//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d%d", &a, &b);
//	int Max = (a > b ? a : b);  //最好加个括号
//	printf("%d", Max);
//	return 0;
//}

//逗号表达式：exp1,exp2,exp3...expn
//从左到右依次执行，最后一个表达式的结果是整个表达式的结果

//下标引用操作符：[]
// arr[7] --> *(arr + 7),*(arr + 7)就是第八个元素
//函数调用操作符：()
//结构成员操作符：. ->
//结构体对象.成员  *p
//结构体指针->成员  p
//ps->age 等价于 (*ps).age

//#include <string.h>
//
//struct student  //定义一个学生结构体
//{
//	char name[20];
//	int age;
//	double score;
//};
//
//void set_student(struct student* ps)  //这里用指针是为了操作实参
//{
//	/*ps->age = 10;
//	strcpy(ps->name, "lihua");
//	ps->score = 10.0;*/
//
//	(*ps).age = 10;
//	strcpy((*ps).name, "lihua");
//	(*ps).score = 10.0;
//}
//
//void print_student(struct student ps)  //这里用形参就可以
//{
//	printf("%d %s %lf\n", ps.age, ps.name, ps.score);
//}
//
//int main()
//{
//	struct student s = { 0 };
//	set_student(&s);
//	print_student(s);
//	return 0;
//}

//变种水仙花

//#include <math.h>
//int main()
//{
//	int i = 0;
//	for (i = 10000; i <= 99999; i++)
//	{	
//		int sum = 0;
//		int j = 0;
//		for (j = 1; j <= 4; j++)
//		{
//			int k = (int)pow(10, j);
//			sum += (i / k) * (i % k);
//		}
//		if (sum = i)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}