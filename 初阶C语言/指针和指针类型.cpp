#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

// 指针是什么？
// 指针是内存中一个最小单元的编号，也就是地址，一个最小内存单元是1byte
// 平常口语中说的指针，通常是指指针变量，是用来存放内存地址的变量
// int main()
// {
//	 int a = 10;  //a为一个整形变量，占用四个字节的内存空间
//	 int* pa = &a;  //取地址a取的是四个字节中第一个字节的地址
//	 //pa是一个指针变量，用来存放地址的
//	 return 0;
// }
// 指针变量，里面存放的是地址，通过这个地址，可以找到内存单元
// 对于32位的机器，有32根地址线，假设每根地址线寻址的时候产生高点平（高电压）和低电平（低电压），即1/0
// 那么32根地址线就会产生比如00000000000000000000000000000000，一共有2^32个二进制序列
// 即有2^32个地址，每个地址标识一个字节，即2^32次方个字节，即4GB
// 在32位机器上，一个指针变量的大小为4个字节
// 在64位机器上，一个指针变量的大小为8个字节
// x86是32位的环境，x64是64位的环境
// 
// 指针类型的意义
//
// int main()
// {
//	 int a = 0x11223344;  //一个16进制位为4个bit位，两个16进制位为8个bit,1个byte,0000-1111
//	 int* pa = &a;
//	 *pa = 0;
//	 printf("%d", a);
//	 return 0;
// }
// 指针类型决定了指针在解引用的时候访问几个字节
// int*类型的指针变量，解引用访问4个字节
// char*类型的指针变量，解引用访问1个字节
//
// int main()
// {
//  int a = 0;
//  int* pa = &a;
//  char* pc = (char*)&a;
//  printf("%p\n", pa);
//  printf("%p\n", pa+1);
//  printf("%p\n", pc);
//  printf("%p\n", pc+1);
//  return 0;
// }
// 结论：指针的类型决定了指针+-1的时候，跳过几个字节
// 决定了指针的步长
// 指针类型决定访问空间，不同类型访问权限不同
//
// 野指针
// 指针的使用要明确的初始化，可以使用NULL
//
// int main()
// {
//	int* p;  //指针未初始化，默认为随机值
//	*p = 10;  //这时候的p就是野指针,非法访问内存了
//	return 0;
// }
// 指针越界访问的时候，也是野指针
// int main()
// {
// 	int arr[10] = { 0 };
// 	int* p = arr;
//	int i = 0;
//	for (i = 0; i <= 10; i++)
//	{
//		(*p) = i;
//		p++;
//	}
// 	return 0;
// }
// 指针指向的空间释放，也是野指针
// 
// 如何避免野指针：
// 1.指针初始化
// 2.小心指针越界
// 3.指针指向空间释放即使置NULL
// 4.避免局部变量的地址
// 5.指针使用前检查有效性
//
// 指针运算：
// 
//  指针-指针:指针减去指针得到的数的绝对值是指针和指针间元素的个数
// 不是所有指针都能相减，指向同一块空间的2个指针才能相减
// 指针的关系运算：
// 标准规定：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，
// 但是不允许与指向第一个元素之前的那个内存位置的指针进行比较
// 
// 指针+-整数
// 
// 指针和数组
// 数组：一组相同类型元素的集合
// 指针变量：是一个变量，存放的是地址
// 数组名是数组首元素地址，把数组名存放到指针中，可以通过指针访问数组
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", (*p + i));
//	}
//	return 0;
//}
// 二级指针
// 二级指针是用来存放一级指针变量的地址
// 
//int main()
//{
//	int a = 0;
//	int* pa = &a;  //pa是一个指针变量，同时也是个一级指针变量
//	int** ppa = &pa;  //ppa是一个二级指针变量
//	**ppa;  //第一个int*的意思是指向的对象是int*类型，第二个星的意思是为指针
//	//(*pa) = 20;
//	//printf("%d", a);
//
//	return 0;
//}
// 
// 指针数组
// 存放指针的数组就是指针数组
// int arr[10];
// int* parr[10];  这就是指针数组
// 指针数组模拟二维数组
int main()
{
	int arr1[4] = { 1, 2, 3, 4 };
	int arr2[4] = { 2, 3, 4, 5 };
	int arr3[4] = { 3, 4, 5, 6 };
	int* parr[3] = { arr1, arr2, arr3 };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 4; j++)
		{
			printf("%d", parr[i][j]); 
		}
		printf("\n");
	}
	return 0;
}